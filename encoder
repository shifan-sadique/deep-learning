import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow import keras
from keras.datasets import mnist
from keras.layers import Input,Dense
from keras.models import Model

mnistDb= keras.datasets.mnist

(xtrain,_),(xtest,_)=mnistDb.load_data()


print(xtrain.shape)

xtrain=xtrain.reshape((60000,784))
xtest=xtest.reshape((10000,784))
xtrain=xtrain.astype("float32")/255
xtest=xtest.astype("float32")/255

print("xtrain",xtrain.shape)
print(xtest.shape)

input_img=Input(shape=(784,))

encoded= Dense(units=500,activation="relu")(input_img)


encoded=Dense(units=200,activation="relu")(encoded)

encoded=Dense(units=100,activation="relu")(encoded)

decoded=Dense(units=200,activation="relu")(encoded)

decoded=Dense(units=500,activation="relu")(decoded)

decoded=Dense(units=784,activation="sigmoid")(decoded)

autoencoder=Model(input_img,decoded)

autoencoder.summary()

autoencoder.compile(optimizer="adam",loss="binary_crossentropy",metrics=["accuracy"])

autoencoder.fit(xtrain,xtrain,epochs=50,batch_size=256,shuffle=True,validation_data=(xtest,xtest))

reconstructed_images=autoencoder.predict(xtest)
plt.imshow(xtest[1].reshape(28,28))


plt.imshow(reconstructed_images[1].reshape(28,28))
